{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Notes","state","note","name","strNote","str","trim","oldState","this","push","setState","id","newState","filter","index","className","Input","type","placeholder","value","onChange","event","updateStrNode","target","success","onClick","addNote","map","Item","key","style","backgroundColor","justifyContent","paddingLeft","paddingRight","danger","outline","sm","removeNote","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAcMA,E,YACJ,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,KAAM,CACJ,CAACC,KAAM,wCACP,CAACA,KAAM,8CACP,CAACA,KAAM,qDAETC,QAAS,IARA,E,qEAYLC,GACN,GAAkB,KAAfA,EAAIC,OAAc,CACnB,IAAIC,EAAWC,KAAKP,MAAMC,KAC1BK,EAASE,KAAK,CAACN,KAAME,IACrBG,KAAKE,SAAS,CACZR,KAAMK,EACNH,QAAS,Q,oCAKDC,GACZG,KAAKE,SAAS,CACZN,QAASC,M,iCAIFM,GACT,IAAIC,EAAWJ,KAAKP,MAAMC,KAAKW,QAAO,SAACX,EAAKY,GAAN,OAAgBA,IAAUH,KAChEH,KAAKE,SAAS,CACZR,KAAMU,M,+BAID,IAAD,OACN,OACE,yBAAKG,UAAU,OACb,kBAAC,OAAD,KACE,kBAAC,OAAKC,MAAN,CACIC,KAAK,OACLC,YAAY,4EACZC,MAAOX,KAAKP,MAAMG,QAClBgB,SAAU,SAACC,GAAD,OAAW,EAAKC,cAAcD,EAAME,OAAOJ,WAG3D,kBAAC,SAAD,CAAQJ,UAAU,SAASS,SAAO,EAACC,QAAS,kBAAM,EAAKC,QAAQ,EAAKzB,MAAMG,WAA1E,+FAGA,kBAAC,YAAD,KACGI,KAAKP,MAAMC,KAAKyB,KAAI,SAACzB,EAAKY,GACzB,OACE,kBAAC,YAAUc,KAAX,CAAgBC,IAAKf,EAAMgB,MAAO,CAACC,gBAAiB,uBAClD,kBAAC,MAAD,CAAKC,eAAe,UAAUH,IAAKf,EAAOgB,MAAO,CAACG,YAAY,OAAQC,aAAa,SACjF,0BAAMnB,UAAU,WACd,gCAASD,EAAO,GADlB,OAGGZ,EAAKC,MAER,kBAAC,SAAD,CAAQgC,QAAM,EAACC,SAAO,EAACC,IAAE,EAACZ,QAAS,kBAAM,EAAKa,WAAWxB,KAAzD,gB,GA7DEyB,IAAMC,WAwEXC,EAjFf,WACE,OACE,kBAAC,YAAD,CAAW1B,UAAU,WACnB,kBAAC,EAAD,QCIc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e3333704.chunk.js","sourcesContent":["import React from 'react';\nimport {Row, ListGroup, Container, Form, Button } from 'bootstrap-4-react';\n\n//import PropTypes from 'prop-types'\n\nfunction App() { \n  return (\n    <Container className=\"wrapper\">\n      <Notes/>\n    </Container>\n  );\n}\n\n\nclass Notes extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      note: [\n        {name: \"Встать\"},\n        {name: \"Умыться\"},\n        {name: \"Покушать\"}\n      ],\n      strNote: \"\"\n    };\n  }\n\n  addNote(str){\n    if(str.trim() !== \"\"){\n      var oldState = this.state.note;\n      oldState.push({name: str})\n      this.setState({\n        note: oldState,\n        strNote: \"\"\n      })\n    }\n  }\n\n  updateStrNode(str){\n    this.setState({\n      strNote: str \n    })\n  }\n\n  removeNote(id){\n    var newState = this.state.note.filter((note,index) => index !== id)\n    this.setState({\n      note: newState\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"vse\">\n        <Form>\n          <Form.Input \n              type=\"text\"\n              placeholder=\"Новая заметка\"\n              value={this.state.strNote}\n              onChange={(event) => this.updateStrNode(event.target.value)}\n          />\n        </Form>\n        <Button className=\"btnAdd\" success onClick={() => this.addNote(this.state.strNote)} >\n              Добавить заметку\n        </Button>\n        <ListGroup>\n          {this.state.note.map((note,index) => {\n            return (\n              <ListGroup.Item key={index}style={{backgroundColor: \"rgb(246, 248, 134)\"}}>\n                <Row justifyContent=\"between\" key={index} style={{paddingLeft:\"10px\", paddingRight:\"10px\"}}>\n                  <span className=\"perenos\">\n                    <strong>{index +1}</strong>\n                    &nbsp;\n                    {note.name}\n                  </span>\n                  <Button danger outline sm onClick={() => this.removeNote(index)}>x</Button>\n                </Row >\n              </ListGroup.Item>\n            )\n          })}\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}